/*
Copyright Hiranmoy Das Chowdhury.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/HiranmoyChowdhury/ResourceController/pkg/apis/rcs/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RanChyLister helps list RanChies.
// All objects returned here must be treated as read-only.
type RanChyLister interface {
	// List lists all RanChies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RanChy, err error)
	// RanChies returns an object that can list and get RanChies.
	RanChies(namespace string) RanChyNamespaceLister
	RanChyListerExpansion
}

// ranChyLister implements the RanChyLister interface.
type ranChyLister struct {
	indexer cache.Indexer
}

// NewRanChyLister returns a new RanChyLister.
func NewRanChyLister(indexer cache.Indexer) RanChyLister {
	return &ranChyLister{indexer: indexer}
}

// List lists all RanChies in the indexer.
func (s *ranChyLister) List(selector labels.Selector) (ret []*v1alpha1.RanChy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RanChy))
	})
	return ret, err
}

// RanChies returns an object that can list and get RanChies.
func (s *ranChyLister) RanChies(namespace string) RanChyNamespaceLister {
	return ranChyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RanChyNamespaceLister helps list and get RanChies.
// All objects returned here must be treated as read-only.
type RanChyNamespaceLister interface {
	// List lists all RanChies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RanChy, err error)
	// Get retrieves the RanChy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RanChy, error)
	RanChyNamespaceListerExpansion
}

// ranChyNamespaceLister implements the RanChyNamespaceLister
// interface.
type ranChyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RanChies in the indexer for a given namespace.
func (s ranChyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RanChy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RanChy))
	})
	return ret, err
}

// Get retrieves the RanChy from the indexer for a given namespace and name.
func (s ranChyNamespaceLister) Get(name string) (*v1alpha1.RanChy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ranchy"), name)
	}
	return obj.(*v1alpha1.RanChy), nil
}
